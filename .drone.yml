kind: pipeline
name: kobopatch

steps:
- name: deps
  image: golang:1.12.7-stretch
  commands:
  - go mod download
- name: test
  image: golang:1.12.7-stretch
  commands:
  - apt update
  - apt install -y zlib1g-dev
  - go test -v ./...

---

kind: pipeline
name: test-patches

steps:
- name: build
  image: golang:1.12.7-stretch
  commands:
  - apt update
  - apt install -y zlib1g-dev
  - mkdir build
  - CGO_ENABLED=1 go build -o build/kobopatch ./kobopatch
- name: get-patches
  image: golang:1.12.7-stretch
  commands:
  - git clone https://github.com/geek1011/kobopatch-patches
  - cd kobopatch-patches
  - git checkout "$(git describe --tags --abbrev=0 HEAD)"
- name: test
  image: golang:1.12.7-stretch
  commands:
  - cd kobopatch-patches
  - "PATH=\"$${PWD}/../build:$${PATH}\" ./scripts/test.sh | tr \"\\r\" \"\\n\""

---

kind: pipeline
name: release

platform:
  os: linux
  arch: amd64

steps:
- name: cross
  image: dockercore/golang-cross:1.12.7
  commands:
  - dpkg --add-architecture i386
  - apt update
  - apt install -y libz-mingw-w64-dev zlib1g-dev:i386 zlib1g-dev libc6-dev-armhf-cross libc6-dev-i386 gcc-multilib
  - mkdir build
  - GOLDFLAGS="-s -w -linkmode external -X main.version=$(git describe --tags --always)"
  - GOOS=linux    GOARCH=amd64                           CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/kobopatch-linux-64bit"         ./kobopatch
  - GOOS=linux    GOARCH=amd64                           CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/kobopatch-apply-linux-64bit"   ./tools/kobopatch-apply
  - GOOS=linux    GOARCH=amd64                           CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/cssextract-linux-64bit"        ./tools/cssextract
  - GOOS=linux    GOARCH=386    CC="gcc -m32"            CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/kobopatch-linux-32bit"         ./kobopatch
  - GOOS=linux    GOARCH=386    CC="gcc -m32"            CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/kobopatch-apply-linux-32bit"   ./tools/kobopatch-apply
  - GOOS=linux    GOARCH=386    CC="gcc -m32"            CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/cssextract-linux-32bit"        ./tools/cssextract
  - GOOS=darwin   GOARCH=amd64  CC=o64-clang             CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/kobopatch-darwin-64bit"        ./kobopatch
  - GOOS=darwin   GOARCH=amd64  CC=o64-clang             CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/cssextract-darwin-64bit"       ./tools/cssextract
  - GOOS=darwin   GOARCH=amd64  CC=o64-clang             CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS}" -o "build/kobopatch-apply-darwin-64bit"  ./tools/kobopatch-apply
  - GOOS=windows  GOARCH=386    CC=i686-w64-mingw32-gcc  CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS} -extldflags -static" -o "build/koboptch-windows.exe"         ./kobopatch
  - GOOS=windows  GOARCH=386    CC=i686-w64-mingw32-gcc  CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS} -extldflags -static" -o "build/cssextract-windows.exe"       ./tools/cssextract
  - GOOS=windows  GOARCH=386    CC=i686-w64-mingw32-gcc  CGO_ENABLED=1  go build -ldflags "$${GOLDFLAGS} -extldflags -static" -o "build/koboptch-apply-windows.exe"   ./tools/kobopatch-apply
  - ls -lah build
- name: notes
  image: golang:1.12.7-stretch
  commands:
  - git log "$(git describe --tags --abbrev=0 HEAD~1)..HEAD" --oneline --format='%h %s' | tee -a notes.md
- name: release
  image: plugins/github-release
  settings:
    api_key: {from_secret: GITHUB_TOKEN}
    title: ${DRONE_TAG}
    note: notes.md
    files: build/*
    draft: true

trigger:
  ref:
  - refs/tags/*

depends_on:
- kobopatch
- test-patches